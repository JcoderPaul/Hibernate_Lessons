****** Repository и DAO ******

*** Паттерн DAO ***

DAO (Data Access Object) - получил особо широкое распространение и применение в мире J2EE.
Его прямое предназначение — абстрагировать и инкапсулировать доступ к источнику данных.
DAO управляет соединением с источником данных для получения и записи данных.

В классическом варианте DAO содержит только стандартные CRUD-методы. Клиент вызывает эти
методы получая или передавая в качестве аргумента так называемый DTO (Data Transfer Object).

Клиентский код вызывает методы DAO, которые производят операции с базой данных. DAO в свою
очередь выполняет необходимые SQL-запросы для получения или изменения данных. DAO не содержит
логики бизнес-приложения, а только предоставляет доступ к данным.

DAO является подходом к ограничению доступа к данным, скрывая реализацию работы с базой
данных. DAO позволяет изменять реализацию доступа к данным без влияния на работу остальных
компонентов. По сути, DAO является реализацией слоя отображения реляционных данных в объекты
и наоборот. Именно здесь сосредотачивается решение проблемы, известной как "Object-relational
impedance mismatch".

*** Паттерн Repository ***

Repository - выступает в роли посредника между слоем домена и слоем отображения реляционных
данных. Он выполняет роль коллекции объектов домена в оперативной памяти. Таким образом,
репозиторий представляет собой более высокий уровень абстракции над слоем отображения данных.

Repository — это объект, который выступает в качестве централизованного хранилища для всех
операций с данными в приложении. Репозиторий содержит логику доступа к данным, которая может
быть использована в различных частях приложения. В отличие от DAO, репозиторий может обрабатывать
данные разных типов и, следовательно, может использоваться в различных частях приложения.no

Repository является ориентированным на модель предметной области, в то время как DAO больше
ориентирован на источник данных. Это означает, что Repository может содержать методы,
возвращающие объекты предметной области, удовлетворяющие какому-либо заданному критерию, а
также содержать логику конструирования запросов к нижележащему слою (собственно к DAO).

Объекты, запрашиваемые у репозитория, могут иметь довольно сложную структуру. Например, объект
Employee может содержать ссылку на объект Organization и т.п. Для того, чтобы обеспечить
корректную работу по сохранению и загрузке подобных объектов репозиторию может понадобиться
один или несколько DAO.

Выводы:

Основным преимуществом использования Repository перед DAO является то, что при изменении
структуры базы данных или отношений таблиц друг с другом, приложению не нужно делать
изменения в разных частях приложения, использующих DAO. Теперь Repository — это
единственное место, где находится логика доступа к данным.

DAO (Data Access Object) и Repository — это два взаимосвязанных понятия, относящихся к слою
доступа к данным. Целью DAO является управление доступом к данным в постоянном хранилище,
таком как база данных. Repository, с другой стороны, является абстракцией и служит для
изоляции слоя доступа к данным от верхних уровней приложения, таких как Service, Controller
см. DOC/MVC.jpg.

Паттерны Repository и DAO не исключают друг-друга. Их можно задействовать в связке. Применяя
Repository как коллекцию объектов в памяти, мы можем поместить DAO на более низкий уровень и
инкапсулировать в нем логику обращения к источнику данных.

Важно помнить об обязанностях каждого из решений и их различиях:
- DAO инкапсулирует доступ к источнику данных;
- DAO является реализацией слоя объектно-реляционного отображения;
- DAO более ориентирован на источник данных (т.е. на БД)

- Repository представляет более высокий уровень абстракции (находится над DAO);
- Repository выполняет роль коллекции объектов домена в памяти;
- Repository ориентирован на модель предметной области;