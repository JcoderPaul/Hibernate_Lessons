****** Slf4о и Log4j ******

Log4j — библиотека журналирования (логирования) Java-программ, часть общего
проекта «Apache Logging Project».

Log4j первоначально развивался в рамках зонтичного «Apache Jakarta Project»,
ответственного за все Java-проекты Apache, но впоследствии выделился в отдельный,
очень популярный проект журналирования.

Используется часто при написании программ на Java, для ведения логов.

!!! 9 декабря 2021 года в Log4j 2 была выявлена критическая уязвимость
(CVE-2021-44228), позволяющая выполнить произвольный код. !!!

*** Уровни логирования Log4j ***

Уровни журнала и сообщения в Log4j в порядке убывания серьезности см. LogLevels.jpg.

Уровень	| Описание
---------------------------------------------------------------------------------
OFF	    | Максимально возможный уровень, предназначен для выключения логирования.
---------------------------------------------------------------------------------
FATAL	| Серьезные ошибки, которые вызывают преждевременное прекращение.
        | Ожидается, что они будут немедленно видны на консоли состояния.
---------------------------------------------------------------------------------
ERROR	| Ошибки во время выполнения или неожиданные условия. Ожидайте, что они
        | будут немедленно видны на консоли состояния.
---------------------------------------------------------------------------------
WARN	| Использование устаревших API, неправильное использование API, «почти»
        | ошибки, ситуации времени выполнения которые нежелательны или неожиданны,
        | но не обязательно «неправильные». Ожидается, что они будут немедленно
        | видны на консоли состояния.
---------------------------------------------------------------------------------
INFO	| Уведомления во время выполнения (запуск / выключение). Ожидается, что они
        | будут немедленно видны на консоли.
---------------------------------------------------------------------------------
DEBUG	| Подробная информация о потоке через систему. Ожидается, что они будут
        | записаны только в журналы. В общем, большинство строк, написанных вашим
        | приложением, должны быть записаны как DEBUG.
---------------------------------------------------------------------------------
TRACE	| Наиболее подробная информация. Ожидается, что они будут записаны только
        | в журналы. Начиная с версии 1.2.12.
---------------------------------------------------------------------------------

****** SLF4J ******

SLF4J (Simple Logging Facade for Java) — библиотека для протоколирования, ставящая
своей целью предоставить максимально простой, но при этом мощный фасад для различных
систем протоколирования на Java.

SLF4J предоставляет простой обобщённый интерфейс для систем протоколирования, не
зависящий от конкретной реализации.

Реализация может быть выбрана и сконфигурирована без изменения кода приложения.
Slf4J прозрачно интегрируется со следующими реализациями:

NOP — реализация, не выполняющая никаких действий;
Simple — использование стандартного вывода для логов;
Java Logging API — система протоколирования, включенная в JDK;
Log4J — одна из наиболее известных систем протоколирования для java (см. LofAndLogger.jpg);
JCL — фреймворк, также предоставляющий адаптер для протоколирования;
LogBack — система протоколирования, представляющая собой развитие log4j и специально
          разработанная для использования совместно с slf4j.

Дополнительно к этому, SLF4J предоставляет возможность интегрировать компоненты, зависимые
от других систем протоколирования (Log4J, JCL), подставляя реализации, направляющие логи
этих систем в SLF4J.

Пример использования:

**************************************************************************************************
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

class MyClass {
    // 1. Объявляем переменную логгера
	private Logger log = LoggerFactory.getLogger(MyClass.class);

	...
    // 2. Выводим строку в debug
	log.debug("...");

	...
    // 3. Выводим в info  строку с аргументом, подставляемым в неё
	log.info("Some object: {}", object);

	...
    // 4. Выводим в error ошибку, вместе с исключением
	log.error("Error during some job!!", e);
}
**************************************************************************************************