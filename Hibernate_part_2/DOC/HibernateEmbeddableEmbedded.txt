****** Hibernate – @Embeddable and @Embedded аннотации ******

Аннотации @Embeddable и @Embedded в Hibernate используются для сопоставления
свойств объекта со столбцами в таблице базы данных. Эти аннотации используются
в сочетании, чтобы позволить свойствам одного класса быть включенными в качестве
типа значения в другой класс, а затем сохраняться в базе данных как часть
содержащего класса.

*** Описание ***

- Аннотация @Embeddable используется, чтобы пометить класс как встраиваемый, что
  означает, что его свойства могут быть включены в другой класс в качестве типа
  значения. Класс, отмеченный @Embeddable, называется встраиваемым классом.

- Аннотация @Embedded используется для обозначения поля в классе как встраиваемого
  объекта и используется в классе, содержащем встраиваемый объект.

- Используя эти аннотации, Hibernate может автоматически сохранять свойства
  встраиваемого класса в содержащем классе в таблице базы данных без необходимости
  создавать отдельную таблицу для встраиваемого класса.

- Использование аннотаций @Embeddable и @Embedded в Hibernate позволяет улучшить
  моделирование данных, повторное использование кода, нормализацию и повысить
  производительность. Аннотации также позволяют инкапсулировать бизнес-логику во
  встраиваемом классе.

*** Преимущества использования аннотаций @Embedd... ***

Основные преимущества использования аннотаций @Embeddable и @Embedded в Hibernate:

1. Повторное использование кода: вы можете повторно использовать встраиваемый класс
   в нескольких объектах, избегая дублирования кода.
2. Нормализация: помогает нормализовать базу данных за счет уменьшения количества
   таблиц, что, в свою очередь, повышает производительность.
3. Целостность данных: обеспечивает целостность данных, поддерживая связь между
   встраиваемым и содержащим классом.
4. Простота: упрощает процесс разработки за счет уменьшения количества классов и таблиц,
   необходимых для сопоставления данных.
5. Улучшенное моделирование данных: это позволяет улучшить моделирование данных,
   позволяя инкапсулировать свойства объекта в другой объект, делая структуру данных
   более интуитивно понятной и простой для понимания.
6. Простота обслуживания: это делает обслуживание кодовой базы более управляемым и простым.
7. Гибкость: встраиваемые классы можно использовать в нескольких объектах, а также
   поддерживается сложное моделирование данных с использованием @Embedded и @AttributeOverrides.
8. Удобочитаемость. Использование аннотаций @Embeddable и @Embedded делает код более
   читабельным и понятным.
9. Производительность: повышает производительность приложения за счет уменьшения количества
   соединений, необходимых для получения данных.
10. Бизнес-логика: позволяет инкапсулировать бизнес-логику во встраиваемом классе, делая
    его более управляемым и простым для понимания.

Пример:

************************************************************************************************
@Embeddable
public class Address {
    private String street;
    private String city;
    private String state;
    private String zip;
    // getters and setters
}
************************************************************************************************

Entity сущность со встраиваемым классом, показанным выше:

************************************************************************************************
@Entity
public class Employee {
    @Id
    private int id;
    private String name;

    @Embedded
    private Address address;
    // getters and setters
}
************************************************************************************************

В этом примере класс Address помечен как @Embeddable, что означает, что его можно включить в
качестве типа значения в другой класс. Класс Employee имеет поле Address, помеченное
аннотацией @Embedded. Это сообщает Hibernate, что объект Address является встраиваемым объектом,
и его свойства должны быть сопоставлены со столбцами в той же таблице, что и класс Employee.

Когда объект «Employee» сохраняется в базе данных, свойства встроенного объекта «Address» также
будут сохранены в той же таблице, а имена столбцов имеют префикс имени поля в классе «Employee»
(в данном случае «address_» ).

!!! Внимание !!! Мы также можем использовать @AttributeOverrides для настройки сопоставления
                 имен столбцов.

Например, свойство street класса Address сопоставляется с home_street в таблице базы данных.
************************************************************************************************
@Entity
public class Employee {
    @Id
    private int id;
    private String name;

    @Embedded
    @AttributeOverrides({
            @AttributeOverride(name = "street", column = @column(name = "home_street"))
                        })
    private Address address;

    // getters and setters
}
************************************************************************************************

Встраиваемые и встроенные аннотации являются полезными инструментами как в веб-разработке,
так и в Hibernate для добавления дополнительной информации и контекста к фрагменту контента
или определения отношений между объектами в конфигурации ORM.

Они позволяют лучше организовывать и повторно использовать сложные объекты-значения, делая
код более удобным и эффективным.