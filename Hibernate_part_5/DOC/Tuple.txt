- Ознакомительная статья -

****** Java Tuple или Java-кортеж ******

Кортеж — это структура данных, которая может содержать объекты разных типов.
Эти объекты не связаны друг с другом, но имеют значение, когда мы рассматриваем
их вместе.

В общем случае кортеж — это упорядоченный набор объектов. В кортеже данные хранятся
как объект в отдельном байтовом массиве. Он имеет значения, разделенные запятыми,
заключенные в пару квадратных скобок [].

Кортежи неизменяемы, в отличие от структуры данных списков. Кортеж может содержать
несколько кортежей. Его также можно рассматривать как анонимный объект.

*** Особенности кортежа - Features of Tuple ***
Кортеж имеет следующие особенности:
- Он типобезопасный (typesafe), итерируемый (iterable), неизменяемый (immutable) и
  сериализуемый (serializable).
- Он реализует toString(), equals() и hashCode().
- Он также реализует Comparable (Tuple implements Comparable<Tuple>)

*** Пример кортежа - Tuple Example ***
Рассмотрим следующий пример:

********************************************************************************************************
["Sophia", "Female", 22, "Marketing Manager"]
********************************************************************************************************

Приведенный выше кортеж является четверным, поскольку он состоит из четырех элементов (объектов).
Мы видим, что каждый объект имеет свой тип. Но когда мы рассматриваем его в совокупности, он имеет
особое значение. Приведенный выше кортеж представляет данные сотрудника, такие как имя, пол, возраст
и должность.

Давайте посмотрим на другие примеры кортежей:

********************************************************************************************************
["Java", "Object-oriented", 14]
["John", "Wick" 21, "USA", false, "johnwick@gmail.com"]
[3, "Samsung", "Galaxy S2", 37000.00]
********************************************************************************************************

*** Кортеж в Java - Tuple in Java ***

В Java кортеж — это общая структура данных, которая рассматривает каждый элемент как объект, и эти
объекты хранятся в отдельном массиве байтов. Другими словами, мы также можем сказать, что кортеж —
это упорядоченный набор объектов разных типов.

Функциональность кортежа может быть реализована с использованием структуры данных списка и массива,
но эти структуры данных не поддерживают разные типы данных по своей конструкции. Отсюда ясно, что
гетерогенный кортеж, использующий стандартную структуру данных (список/массив), в Java невозможен.
Поскольку нам требовалась структура данных кортежа, чтобы выполнить требование сохранения однородной
структуры данных.

!!! Обратите внимание !!! Такая структура данных, как кортеж по-умолчанию отсутствует в 'экосистеме' Java.

Но мы можем реализовать структуру данных кортежа, используя стороннюю библиотеку с именем JavaTuples.

Прежде чем перейти к реализации, сначала мы загрузим файл javatuples.jar. И добавим этот файл в путь
проекта.

Мы также можем использовать следующую зависимость в файле pom.xml для реализации структуры данных
кортежей в Java:

********************************************************************************************************
<dependency>
<groupId>org.javatuples</groupId>
<artifactId>javatuples</artifactId>
<version>1.2</version>
</dependency>
********************************************************************************************************

Давайте реализуем кортеж и создадим простую программу кортежа Java.

*** Библиотека - JavaTuples Library ***

В библиотеке JavaTuples есть классы кортежей, соответствующие размеру кортежа. Кортежи могут быть
разного размера. Кортеж может содержать не более 10 элементов. Реализация каждого кортежа отличается.
Иерархия классов выглядит следующим образом:

Java.lang.Object
  ↳ org.javatuples.Tuple
      ↳ org.javatuples.ClassName<>

*** Java-класс кортежа ***

Tuple — это абстрактный базовый класс для всех классов кортежей, принадлежащих пакету org.javatuples.
Все методы класса tuple являются общедоступными и окончательными. В следующей таблице приведены методы
класса кортежа. Он реализует интерфейсы Iterable и Serializable.

--------------------------------------------------------------------------------------------------------
Метод                                                      | Описание
--------------------------------------------------------------------------------------------------------
public final boolean contains(Object value)                | Проверяет, есть ли в кортеже определенный
                                                           | элемент или нет.
--------------------------------------------------------------------------------------------------------
public final boolean containsAll(Collection<?> collection) | Возвращает true, если этот кортеж содержит
                                                           | все элементы указанной коллекции
                                                           | (список/массив).
--------------------------------------------------------------------------------------------------------
public final boolean equals(Object obj)                    | Переопределяет метод equals() класса Object.
--------------------------------------------------------------------------------------------------------
public abstract int getSize()                              | Возвращает размер кортежа.
--------------------------------------------------------------------------------------------------------
public final Object getValue(int pos)                      | Получите значение в определенной позиции в
                                                           | кортеже. Этот метод должен возвращать объект,
                                                           | поэтому при его использовании вы потеряете
                                                           | безопасность типов, которую получаете с
                                                           | помощью методов getValueX().
--------------------------------------------------------------------------------------------------------
public final int hashCode()                                | Возвращает хэш-код для строки. Он
                                                           | переопределяет метод hashCode() класса Object.
--------------------------------------------------------------------------------------------------------
public final int indexOf(Object value)                     | Возвращает индекс в этой строке первого
                                                           | вхождения указанной подстроки.
--------------------------------------------------------------------------------------------------------
public final Iterator iterator()                           | Возвращает итератор по элементам в этом
                                                           | кортеже в правильной последовательности.
--------------------------------------------------------------------------------------------------------
public final int lastIndexOf(Object value)                 | Возвращает индекс в этой строке последнего
                                                           | вхождения указанной подстроки.
--------------------------------------------------------------------------------------------------------
public final Object[] toArray()                            | Преобразует кортеж в массив.
--------------------------------------------------------------------------------------------------------
public final String toString()                             | Возвращает строковое представление объекта.
                                                           | Переопределяет метод toString() класса Object.
--------------------------------------------------------------------------------------------------------
public final List<Object> toList()                         | Преобразует кортеж в список.
--------------------------------------------------------------------------------------------------------

*** Прямые известные подклассы ***

----------------------------------------------------------------------
Размер кортежа	| Имя класса кортежа | Пример
----------------------------------------------------------------------
One Element	    | Unit	             | Unit<1>
Two Elements	| Pair	             | Pair<1,2>
Three Elements	| Triplet            | Triplet<1,2,3>
Four Elements	| Quartet            | Quartet<1,2,3,4>
Five Elements	| Quintet            | Quintet<1,2,3,4,5>
Six Elements	| Sextet             | Sextet<1,2,3,4,5,6>
Seven Elements	| Septet             | Septet<1,2,3,4,5,6,7>
Eight Elements	| Octet              | Octet<1,2,3,4,5,6,7,8>
Nine Elements	| Ennead             | Ennead<1,2,3,4,5,6,7,8,9>
Ten Elements	| Decade             | Decade<1,2,3,4,5,6,7,8,9,10>
----------------------------------------------------------------------

Помимо вышеупомянутых классов, есть два дополнительных класса, предоставляемых библиотекой
JavaTuples - KeyValue<A, B> и LabelValue<A, B>. Эти два класса похожи на класс Pair и предоставляют
те же функции, но с разной семантикой.

Каждый класс кортежа реализует следующие три интерфейса:
- Iterable;
- Comparable;
- Serializable;

*** Реализация кортежа ***

Реализация кортежа в Java очень проста. Мы должны создать экземпляр класса кортежа, который
соответствует размеру.

TupleExample.java
********************************************************************************************************
import org.javatuples.Quartet;

public class TupleExample {
    public static void main(String args[]){
        //create a pair tuple from the constructor
        Quartet<String, String, Integer, String> quartet =
                    new Quartet<String, String, Integer, String >("Sophia", "Female", 22, "Marketing Manager");
        //print the tuples objects
        System.out.println("The details of the employee are: " + quartet);
    }
}
********************************************************************************************************

На экране:

********************************************************************************************************
The details of the employee are: [Sophia, Female, 22, Marketing Manager]
********************************************************************************************************

*** Операции с кортежами ***

Над кортежем можно выполнять следующие операции:
- Создание кортежа;
- Получение значений;
- Установка значений;
- Добавление элементов;
- Итерация по кортежу;
- Преобразовать кортеж в список;
- Поиск в кортеже;
- Создание кортежа;

Существует три способа создания кортежа:
- Используя метод with();
- Используя конструктор;
- Используя коллекцию;

Давайте рассмотрим описанные выше три способа создания кортежа.

*** Используя метод with() ***

Библиотека JavaTuples предоставляет метод with(), который создает кортеж с указанными значениями.
Метод принадлежит пакету org.javatuples.Pair. Он используется для создания экземпляров объектов
со значениями.

Синтаксис:
********************************************************************************************************
ClassName<type- 1 , type- 2 , type-n> object = ClassName.with(value- 1 , value- 2 , ......, value-n);
********************************************************************************************************

Пример:

********************************************************************************************************
Pair<String, Double>pair = Pair.with( "iPhone 12" ,  112000.00 );
********************************************************************************************************

Приведенный выше объект класса Pair создает кортеж с двумя значениями. Давайте создадим Java-программу для
того же самого.

CreateTupleExample1.java

********************************************************************************************************
import org.javatuples.Pair;

class CreateTupleExample1 {
    public static void main(String args[]){
        Pair<Integer, String> pair = Pair.with(9086651, "Dell Laptop");
        System.out.println(pair);
    }
}
********************************************************************************************************

В консоли:

********************************************************************************************************
[9086651, Dell Laptop]
********************************************************************************************************

*** Используя конструктор ***

В этом случае мы создаем конструктор класса в соответствии с требованием.

Синтаксис:
********************************************************************************************************
ClassName<type-1, type-2, ……, type-n> object =
                            new ClassName<type-1, type-2, ……, type-n> (value-1, value-2, ……., value-n);
********************************************************************************************************

Пример:

********************************************************************************************************
Quintet <Integer, String, Double, String, Integer> quintet =
                    new Quintet< Integer, String, Double, String, Integer>
                                        (91237, "Mac Book Air", 88490.00, "8-Core CPU", 4);
********************************************************************************************************

Давайте создадим программу Java для создания кортежа с помощью конструктора.

CreateTupleExample2.java
********************************************************************************************************
import org.javatuples.Quintet;

class CreateTupleExample2 {
    public static void main(String args[]){
        Quintet <Integer, String, Double, String, Integer> quintet =
                new Quintet<Integer, String, Double, String, Integer>
                            (91237, "Mac Book Air", 88490.00, "8-Core CPU", 4);
        System.out.println(quintet);
    }
}
********************************************************************************************************

В консоли:

********************************************************************************************************
[91237, Mac Book Air, 88490.0, 8-Core CPU, 4]
********************************************************************************************************

*** Используя коллекцию ***

Библиотека JavaTuples позволяет нам создать кортеж из коллекции с помощью метода fromCollection().
Это также позволяет нам создать кортеж из массива с помощью метода fromArray(). Обратите внимание,
что коллекция/массив должны иметь тот же тип и значения, что и кортеж.

Коллекция/массив должны иметь тот же тип, что и Tuple, а количество значений в коллекции/массиве
должно соответствовать классу Tuple.

Синтаксис:
********************************************************************************************************
ClassName <type-1, type-2, …., type-n> object = ClassName.fromCollection(list);
ClassName <type1, type2…., type-n> object = ClassName.fromArray(array);
********************************************************************************************************

Пример:
********************************************************************************************************
Octet<String, String, String, String, String, String, String, String> p1 = Octet.fromCollection(list);
Sextet<String, String, String,String, String, String> p2 = Sextet.fromArray(arr);
********************************************************************************************************

CreateTupleExample3.java

********************************************************************************************************
import java.util.ArrayList;
import java.util.List;
import org.javatuples.Sextet;
import org.javatuples.Octet;

class CreateTupleExample3 {
    public static void main(String args[]){
        /* creating a list */
        List<String> list = new ArrayList<String>();

        /* adding elements to the list */
        list.add("C");
        list.add("C++");
        list.add("Java");
        list.add("Python");
        list.add("Scala");
        list.add("Ruby");
        list.add("PHP");
        list.add("COBOL");

        /* creating an object of Pair class and passing the list */
        Octet<String, String, String, String, String, String, String, String> p1 =
                                                                Octet.fromCollection(list);

        /* creating an Array */
        String[] arr = {"One", "Two", "Three", "Four", "Five", "Six"};

        /* creating an object of the Pair class and invoking the fromArray() method */
        Sextet<String, String, String, String, String, String> p2 = Sextet.fromArray(arr);

        /* prints the tuple created using list */
        System.out.println(p1);

        /* prints the tuple using Array */
        System.out.println(p2);
    }
}
********************************************************************************************************

Вывод в консоль:

********************************************************************************************************
[C, C++, Java, Python, Scala, Ruby, PHP, COBOL]
[One, Two, Three, Four, Five, Six]
********************************************************************************************************

*** Получить значения ***

Библиотека JavaTuples также позволяет нам извлекать значения из кортежа по указанному индексу с помощью
метода getValueX(). Где X обозначает значение индекса объекта. Индексация начинается с 0.

Example:
********************************************************************************************************
Pair<type-1, type-2> pair = new Pair<type-1, type-2>(value-1, value-2);
type1 val1 = pair.getValue0();
********************************************************************************************************

GetValueExample.java
********************************************************************************************************
import org.javatuples.Pair;

class GetTupleValu{
    public static void main(String args[]){
        //creating a tuple
        Pair<Integer, String> pair = Pair.with(12, "Andrew");

        //getting values at index 1
        System.out.println(pair.getValue1());
    }
}
********************************************************************************************************

На экране:

********************************************************************************************************
[Andrew]
********************************************************************************************************

*** Установить значения ***

Как мы обсуждали выше, кортежи неизменяемы. Следовательно, они не могут быть изменены после их создания.
Чтобы решить эту проблему, библиотека JavaTuples предоставляет метод setValueX(). Где X — значение индекса,
при котором мы хотим установить конкретное значение. Метод создает копию кортежа с вновь добавленным
значением по указанному индексу и возвращает тот же кортеж.

Example:
********************************************************************************************************
Pair<type-1, type-2> pair = new Pair<type-1, type-2>(value-1, value-2);
type1 val1 = pair.getValue0();
********************************************************************************************************

SetValueExample.java
********************************************************************************************************
import org.javatuples.Pair;

class SetTupleValue{
    public static void main(String args[]){
        //creating a tuple
        Pair<Integer, Integer> p1 = Pair.with(67, 69);

        //setting tuple value at index 1
        Pair<Integer, Integer> p2 = p1.setAt1(68);
        System.out.println(p2);
    }
}
********************************************************************************************************

На экране:

********************************************************************************************************
[67, 68]
********************************************************************************************************

*** Добавление значения ***

Есть два способа добавить значения в кортеж:
- В конце кортежа;
- По определенному индексу;
- В конце кортежа;

Библиотека JavaTuples предоставляет метод add() для добавления объектов в кортеж. Он добавляет объект в
конец кортежа и возвращает новый кортеж, сопоставляя количество элементов.

Предположим, у нас есть кортеж из двух элементов, и мы хотим добавить в кортеж еще один элемент. В таком
случае кортеж Pair не будет поддерживать третий элемент. Поэтому, когда мы добавляем элемент в кортеж Pair,
он преобразуется в кортеж Triplet.

Давайте посмотрим пример:

AddElementInTuple.java
********************************************************************************************************
import org.javatuples.Pair;
import org.javatuples.Triplet;

public class AddElementInTuple{
    public static void main(String args[]){
        Pair<String, Integer> pair = Pair.with("Jack", 46);
        Triplet<String, Integer, String> triplet = pair.add("Finance Professional");
        System.out.println(pair);
        System.out.println(triplet);
    }
}
********************************************************************************************************

На экране:

********************************************************************************************************
[Jack, 46]
[Jack, 46, Finance Professional]
********************************************************************************************************

Мы также можем добавить один кортеж к другому кортежу. Это увеличивает количество элементов во вновь
сгенерированном кортеже. Следовательно, он возвращает тип кортежа на основе количества элементов,
присутствующих после добавления.

AddTuplesExample.java
********************************************************************************************************
import org.javatuples.Quartet;
import org.javatuples.Septet;
import org.javatuples.Triplet;

public class AddTuplesExample{
    public static void main(String args[]){
        //creating a tuple with three elements
        Triplet<String, String, String> triplet = Triplet.with("Mango", "Grapes", "Papaya");

        //creating an object of quartet tuple and adding an elements at index-1 in triplet tuple
        Quartet<String, String, String, String> quartet = triplet.addAt1("Banana");

        //adding quartet and triplet tuple we get a septet tuple i.e. 3+4=7
        //the following statement can be written as Septet septet = quartet.add(triplet);
        Septet<String, String, String, String, String, String, String> septet = quartet.add(triplet);
        System.out.println(triplet);
        System.out.println(quartet);
        System.out.println(septet);
    }
}
********************************************************************************************************

В консоли:

********************************************************************************************************
[Mango, Grapes, Papaya]
[Mango, Banana, Grapes, Papaya]
[Mango, Banana, Grapes, Papaya, Mango, Grapes, Papaya]
********************************************************************************************************

*** По указанному индексу ***

По умолчанию новые элементы добавляются в конец кортежа. Но мы можем добавлять элементы по указанному
индексу, используя метод addX().

AddAtIndexExample.java
********************************************************************************************************
import org.javatuples.Quartet;
import org.javatuples.Triplet;

public class AddAtIndexExample{
    public static void main(String args[]){
        //creating a tuple with three elements
        Triplet<String, String, String> triplet = Triplet.with("MCA", "M.Sc.", "MBBS");

        //creating an object of quartet tuple and adding an element at index-2 in triplet tuple
        Quartet<String, String, String, String> quartet = triplet.addAt2("M.Tech");
        System.out.println(triplet);
        System.out.println(quartet);
    }
}
********************************************************************************************************

В консоли:

********************************************************************************************************
[MCA, M.Sc., MBBS]
[MCA, M.Sc., M.Tech, MBBS]
********************************************************************************************************

*** Поиск элемента ***

Мы также можем искать элемент, который находится в кортеже. Для поиска JavaTuples библиотека предоставляет
метод contains() класса Tuple. Он возвращает логическое значение true, если элемент присутствует, иначе
возвращает false.

Давайте посмотрим пример:

SearchingElementExample.java
********************************************************************************************************
import org.javatuples.Pair;

class SearchingElementExample{
    public static void main(String args[]){
        Pair<Integer, String> pair = Pair.with(34, "Jack");

        //returns true because Jack is present in tuple
        boolean res1 = pair.contains("Jack");

        //returns false because Andrew is not present in tuple
        boolean res2 = pair.contains("Andrew");
        System.out.println(res1);
        System.out.println(res2);
    }
}
********************************************************************************************************

В консоли:

********************************************************************************************************
true
false
********************************************************************************************************

*** Преобразование кортежа в коллекцию или массив ***

Каждый класс кортежей имеет методы asList() и toArray(), которые возвращают список и массив соответственно.
Давайте посмотрим пример.

TupleToCollection.java
********************************************************************************************************
import java.util.Arrays;
import java.util.List;
import org.javatuples.Quartet;

public class TupleToCollection{
    public static void main(String args[]){
        //Convert to list
        Quartet<String, Integer, String, Double> quartet =
                                    Quartet.with("Dog", 12,"German Shepherd", 23.89);

        //converts to list
        List<Object> list = quartet.toList();

        //prints list
        System.out.println(list);

        //Converts to array
        Object[] quartletArr = quartet.toArray();

        //prints array
        System.out.println(Arrays.toString(quartletArr));
    }
}
********************************************************************************************************

Вывод на экран:

********************************************************************************************************
[Dog, 12, German Shepherd, 23.89]
[Dog, 12, German Shepherd, 23.89]
********************************************************************************************************

Обратите внимание, что кортеж может содержать разнородные типы, поэтому результирующий тип будет List<Object>
или Object[] соответственно.

*** Итерация по кортежу ***

Все классы кортежей реализуют интерфейс Iterable. Итак, мы можем перебирать кортеж так же, как коллекции или
массивы.

IterateTuple.java
********************************************************************************************************
import org.javatuples.Quartet;

class IterateTuple{
    public static void main(String args[]){
        //creating a quartet tuple
        Quartet<String, Double, Integer, String> quartet =
                                            Quartet.with("Dell", 5600.00, 34, "Digital Solutions");
        //iterate over tuple
        for(Object obj : quartet){
            //prints elements
            System.out.println(obj);
        }
    }
}
********************************************************************************************************

На экран:

********************************************************************************************************
Dell
5600.0
34
Digital Solutions
********************************************************************************************************
