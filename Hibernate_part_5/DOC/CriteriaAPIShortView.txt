****** Кратко о Criteria API ******

В Hibernate есть, как минимум, два способа написания запросов к базе:
- Hibernate Query Language (HQL);
- Criteria API;

Criteria API уже зашит в HIBERNATE и нам его желательно знать. Это мощный инструмент,
но при первом знакомстве кажется более громоздким и менее читабельным нежели HQL. Но
с помощью данного инструмента решаются ряд задач, которые при своей динамической
составляющей удобнее чем HQL.

Взглянем на запрос написанный при помощи Criteria API, условно запросим всех сотрудников
(Employee) из БД:

****************************************************************************************
CriteriaBuilder builder = session.getCriteriaBuilder();
CriteriaQuery<Employee> crQuery = builder.createQuery(Employee.class);

Root<Employee> root = crQuery.from(Employee.class);
crQuery.select(root);

Query<Employee> query = session.createQuery(crQuery);
List<Employee> results = query.getResultList();
****************************************************************************************

Тот же запрос для сравнения запишем на HQL:

****************************************************************************************
String hqlQuery = "from Employee";

Query<Employee> query = session.createQuery(hqlQuery);
List<Employee> results = query.getResultList();
****************************************************************************************

Очевидно, что две последних строки у обоих примеров очень похожи - мы создаем объект Query
и с его помощью получаем List. Не сложно догадаться, что и остальные строки делают что-то
подобное.

Посмотри на строки 3 и 4 первого примера:

****************************************************************************************
Root<Employee> root = crQuery.from(Employee.class);
crQuery.select(root);
****************************************************************************************

А теперь запишем их в одну строку:

****************************************************************************************
crQuery.select(crQuery.from(Employee.class));
****************************************************************************************

Все верно, это конструирование запроса 'SELECT FROM' методами CriteriaAPI.

Для лучшего понимания работы с Criteria API еще несколько примеров,
(для лучшего понимания см. таб. методов ниже), естественно вызов и
получение объектов - CriteriaBuilder, CriteriaQuery и Root, остаются
в коде инициализации:

Запрос 1. Получить всех сотрудников с зарплатой выше 10 тысяч:

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.gt(root.get("salary"), 10000));
****************************************************************************************

Запрос 2. Получить всех сотрудников с зарплатой меньше 50 тысяч:

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.lt(root.get("salary"), 50000));
****************************************************************************************

Запрос 3. Получить всех сотрудников, должность которых содержит слово "тест":

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.like(root.get("occupation"), "%тест%"));
****************************************************************************************

Запрос 4. Получить всех сотрудников с зарплатой от 10 до 50 тысяч:

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.between(root.get("salary"), 10000, 50000));
****************************************************************************************

Запрос 5. Получить всех сотрудников, у которых имя равно null:

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.isNull(root.get("name")));
****************************************************************************************

Запрос 6. Получить всех сотрудников, у которых имя не равно null:

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.isNotNull(root.get("name")));
****************************************************************************************

Логика действий во всех случаях следующая:
- Сначала мы получаем объект CriteriaBuilder.
- Затем, с его помощью, создаем объект CriteriaQuery.
- Затем, начинаем добавлять, остальные части с помощью CriteriaQuery и CriteriaBuilder.

Именно таким образом ты можешь задать параметры для:
- SELECT;
- FROM;
- WHERE;

Также с помощью CriteriaBuilder ты можешь конструировать различные условия для WHERE.

С помощью Criteria API можно сконструировать запрос любой сложности. Например, мы хотим
более сложное условие для WHERE и тогда это будет так (объединим прошлые запросы 1 и 3):

****************************************************************************************
Predicate greaterThan = builder.gt(root.get("salary"), 10000);
Predicate testers = builder.like(root.get("occupation"), "тест%");

crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.or(greaterThan, testers));
****************************************************************************************

Естественно, мы можем легко заменить AND на OR (и запрос станет вида):

****************************************************************************************
crQuery.select(crQuery.
                from(Employee.class)).
                where(builder.and(greaterThan, testers));
****************************************************************************************

Таблица с наиболее частыми сравнениями:
-----------------------------------------------------------------------------------------
SQL	              | Метод	          | Полная запись
-----------------------------------------------------------------------------------------
a < b	          | lt(a, b)	      | builder.lt(a, b)
a > b	          | gt(a, b)	      | builder.gt(a, b)
a OR b	          | or(a, b)	      | builder.or(a, b)
a AND b	          | and(a, b)	      | builder.and(a, b)
a LIKE b	      | like(a, b)	      | builder.like(a, b)
a BETWEEN (c, d)  |	between(a, c, d)  |	builder.between(a, c, d)
a IS NULL	      | isNull(a)	      | builder.isNull(a)
a IS NOT NULL	  | isNotNull(a)	  | builder.isNotNull(a)
-----------------------------------------------------------------------------------------
см. более подробно: DOC/CriteriaBuilderInterface.txt

Добавим сортировку в запрос:

****************************************************************************************
crQuery.select( crQuery.from(Employee.class) );
crQuery.where( builder.and(greaterThan, testers) );
crQuery.orderBy( builder.asc(root.get("salary"),
                 builder.desc(root.get("joinDate") )
****************************************************************************************

Мы вызываем у объекта CriteriaQuery метод orderBy() и передаем в него нужные параметры.

Запрос приведенный выше, будет выглядеть на HQL следующим образом:

****************************************************************************************
select * from Employee
where (...условие 'salary' > 10000...) and (...условие occupation = '%тест%')
order by 'salary' asc, 'joinDate' desc
****************************************************************************************

Необходимо четко усвоить следующее:

- Ключевые операторы типа SELECT, FROM, WHERE вызываются у объекта CriteriaQuery
  (см. DOC/CriteriaQueryInterface.txt).
- Вспомогательные операторы типа AND, OR, DESC вызываются у объекта CriteriaBuilder
  (см. DOC/CriteriaBuilderInterface.txt).
- Имена полей берутся через get() у объекта Root
  (см. DOC/RootInterface.txt).