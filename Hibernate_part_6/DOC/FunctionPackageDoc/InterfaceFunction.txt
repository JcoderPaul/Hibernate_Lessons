****** Interface Function ******

Пакет: java.util.function

Interface Function<T,R>

Где параметры: T - тип входа в функцию;
               R - тип результата функции;

Все известные субинтерфейсы: UnaryOperator<T>
Функциональный интерфейс: Это функциональный интерфейс, поэтому его можно использовать
                          в качестве цели назначения для лямбда-выражения или ссылки
                          на метод.

********************************************************************************************************
@FunctionalInterface
public interface Function<T,R>
********************************************************************************************************

Представляет функцию, которая принимает один аргумент и возвращает результат.
Это функциональный интерфейс, функциональным методом которого является apply(Object).

*** МЕТОДЫ ***

--------------------------------------------------------------------------------------------------------
default <V> Function<T,V>
                andThen(Function<? super R,? extends V> after) - Возвращает составную функцию, которая
                                                                 сначала применяет эту функцию к своему
                                                                 входу, а затем применяет функцию after
                                                                 к результату.

Параметры типа: V- тип вывода функции after и составной функции;
Параметры: after- функция для применения после применения этой функции;
Возвращает: составная функция, которая сначала применяет эту функцию, а затем применяет after функцию;

Исключения: NullPointerException- если после null;

Смотрите также: compose(Function);

--------------------------------------------------------------------------------------------------------
R apply(T t) - Применяет эту функцию к заданному аргументу.

Параметры: t- аргумент функции;
Возвращает: результат функции;

--------------------------------------------------------------------------------------------------------
default <V> Function<V,R>
                compose(Function<? super V,? extends T> before) - Возвращает составную функцию, которая
                                                                  сначала применяет before функцию к
                                                                  своим входным данным, а затем применяет
                                                                  эту функцию к результату.

Параметры типа: V - тип ввода функции before и составной функции;
Параметры: before- функция, которую нужно применить перед применением этой функции;
Возвращает: составная функция, которая сначала применяет before функцию, а затем применяет эту функцию;

Исключения: NullPointerException- если перед значением null;

Смотрите также: andThen(Function);

--------------------------------------------------------------------------------------------------------
static <T> Function<T,T>
                identity() - Возвращает функцию, которая всегда возвращает свой входной аргумент.

Параметры типа: T- тип входных и выходных объектов функции;
Возвращает: функция, которая всегда возвращает свой входной аргумент;

--------------------------------------------------------------------------------------------------------

********************************************************************************************************
См. полную версию: https://docs.oracle.com/javase/8/docs/api/java/util/function/Function.html
********************************************************************************************************