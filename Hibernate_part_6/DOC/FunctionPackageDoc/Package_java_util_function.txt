****** Пакет java.util.function ******

Содержит функциональные интерфейсы предоставляют целевые типы для лямбда-выражений и ссылок на методы.

Каждый функциональный интерфейс имеет один абстрактный метод, называемый функциональным методом
для этого функционального интерфейса, которому сопоставляются или адаптируются параметры
лямбда-выражения и возвращаемые типы. Функциональные интерфейсы могут предоставлять целевой тип
в нескольких контекстах, таких как контекст назначения, вызов метода или контекст приведения:

*******************************************************************************************************
     // Assignment context
     Predicate<String> p = String::isEmpty;

     // Method invocation context
     stream.filter(e -> e.getSize() > 10)...

     // Cast context
     stream.map((ToIntFunction) e -> e.getSize())...
*******************************************************************************************************

Интерфейсы в этом пакете являются функциональными интерфейсами общего назначения, используемыми JDK, и
также доступны для использования пользовательским кодом. Хотя они не определяют полный набор форм
функций, к которым могут быть адаптированы лямбда-выражения, их достаточно для удовлетворения общих
требований. Другие функциональные интерфейсы, предназначенные для конкретных целей, такие как FileFilter,
определяются в пакетах, в которых они используются.

Интерфейсы в этом пакете снабжены аннотациями FunctionalInterface. Эта аннотация не является требованием
для компилятора распознавать интерфейс как функциональный интерфейс, а просто помогает уловить замысел
проекта и заручиться помощью компилятора в выявлении случайных нарушений замысла проекта.

Функциональные интерфейсы часто представляют абстрактные концепции, такие как функции, действия или
предикаты. При документировании функциональных интерфейсов или обращении к переменным, типизированным
как функциональные интерфейсы, обычно ссылаются непосредственно на эти абстрактные понятия, например,
используя «эту функцию» вместо «функция, представленная этим объектом».

Когда говорится, что метод API принимает или возвращает функциональный интерфейс таким образом, например,
«применяет предоставленную функцию к ...», это понимается как ненулевая ссылка на объект, реализующий
соответствующий функциональный интерфейс, если только потенциальная недействительность явно указана.

Функциональные интерфейсы в этом пакете следуют расширяемому соглашению об именах, а именно:

- Существует несколько основных форм функций, в том числе Function(унарная функция от T до R),
  Consumer(унарная функция от T до void), Predicate(унарная функция от T до boolean) и Supplier
  (ниарная функция до R).

- Функциональные формы имеют естественную арность в зависимости от того, как они чаще всего
  используются. Базовые формы могут быть изменены с помощью префикса арности, чтобы указать
  другую арность, например BiFunction(бинарная функция от T и U до R).

- Существуют дополнительные формы производных функций, которые расширяют основные формы функций,
  в том числе UnaryOperator (extends Function) и BinaryOperator (extends BiFunction).

- Типовые параметры функциональных интерфейсов могут быть специализированы к примитивам с
  дополнительными префиксами типов. Чтобы выделить тип возвращаемого значения для типа, который
  имеет как универсальный тип возвращаемого значения, так и общие аргументы, мы используем префикс
  ToXxx, как в ToIntFunction. В противном случае аргументы типа специализируются слева направо,
  как в DoubleConsumer or ObjIntConsumer.

  Префикс типа Obj используется, чтобы указать, что мы не хотим специализировать этот параметр, а
  хотим перейти к следующему параметру, как в ObjIntConsumer.

  Эти схемы можно комбинировать, как в IntToDoubleFunction.

- Если есть префиксы специализации для всех аргументов, префикс арности может быть опущен
  (как в ObjIntConsumer).

*** ИНТЕРФЕЙСЫ ***

BiConsumer<T,U> - Представляет операцию, которая принимает два входных
                  аргумента и не возвращает результата.

BiFunction<T,U,R> - Представляет функцию, которая принимает два аргумента
                    и возвращает результат.

BinaryOperator<T> - Представляет операцию над двумя операндами одного типа,
                    дающую результат того же типа, что и операнды.

BiPredicate<T,U> - Представляет предикат (логическую функцию) двух аргументов.

BooleanSupplier	- Представляет поставщика boolean-значных результатов.

Consumer<T> - Представляет операцию, которая принимает один входной аргумент
              и не возвращает результата.

DoubleBinaryOperator - Представляет операцию над двузначными double операндами
                       и получением double-значного результата.

DoubleConsumer - Представляет операцию, которая принимает double аргумент с
                 одним значением и не возвращает результата.

DoubleFunction<R> - Представляет функцию, которая принимает аргумент с двойным
                    значением и возвращает результат.

DoublePredicate - Представляет предикат (логическую функцию) одного double
                  аргумента со значением.

DoubleSupplier - Представляет поставщика double-значных результатов.

DoubleToIntFunction - Представляет функцию, которая принимает аргумент
                      с Double значением и возвращает результат с
                      целочисленным значением.

DoubleToLongFunction - Представляет функцию, которая принимает аргумент
                       с Double значением и возвращает результат с
                       Long значением.

DoubleUnaryOperator - Представляет операцию с однозначным double операндом,
                      которая дает double результат.

Function<T,R> - Представляет функцию, которая принимает один аргумент
                и возвращает результат.

IntBinaryOperator - Представляет операцию над двузначными int операндами и
                    получением int-значного результата.

IntConsumer - Представляет операцию, которая принимает int аргумент с одним
              значением и не возвращает результата.

IntFunction<R> - Представляет функцию, которая принимает аргумент с целочисленным
                 значением и возвращает результат.

IntPredicate - Представляет предикат (логическую функцию) одного int аргумента
               со значением.

IntSupplier - Представляет поставщика int-значных результатов.

IntToDoubleFunction - Представляет функцию, которая принимает аргумент с целочисленным
                      значением и возвращает результат с Double значением.

IntToLongFunction - Представляет функцию, которая принимает аргумент с целочисленным
                    значением и возвращает результат с Long значением.

IntUnaryOperator - Представляет операцию с однозначным int операндом, которая
                   возвращает int результат.

LongBinaryOperator - Представляет операцию над двузначными long операндами и
                     получением long-значного результата.

LongConsumer - Представляет операцию, которая принимает long аргумент с одним
               значением и не возвращает результата.

LongFunction<R> - Представляет функцию, которая принимает аргумент с Long
                  значением и возвращает результат.

LongPredicate - Представляет предикат (логическую функцию) одного long аргумента
                со значением.

LongSupplier - Представляет поставщика long-значных результатов.

LongToDoubleFunction - Представляет функцию, которая принимает аргумент с Long
                       значением и возвращает результат с Double значением.

LongToIntFunction - Представляет функцию, которая принимает аргумент с Long
                    значением и возвращает результат с целочисленным значением.

LongUnaryOperator - Представляет операцию с однозначным long операндом,
                    которая дает long результат.

ObjDoubleConsumer<T> - Представляет операцию, которая принимает аргумент с объектным
                       значением и double аргумент и не возвращает результата.

ObjIntConsumer<T> - Представляет операцию, которая принимает аргумент с объектным значением
                    и int аргумент и не возвращает результата.

ObjLongConsumer<T> - Представляет операцию, которая принимает аргумент с объектным значением
                     и long аргумент и не возвращает результата.

Predicate<T> - Представляет предикат (логическую функцию) одного аргумента.

Supplier<T> - Представляет поставщика результатов.

ToDoubleBiFunction<T,U> - Представляет функцию, которая принимает два аргумента и возвращает
                          Double результат.

ToDoubleFunction<T> - Представляет функцию, которая возвращает Double результат.

ToIntBiFunction<T,U> - Представляет функцию, которая принимает два аргумента и возвращает
                       результат с целочисленным значением.

ToIntFunction<T> - Представляет функцию, которая возвращает результат с целочисленным значением.

ToLongBiFunction<T,U> - Представляет функцию, которая принимает два аргумента и возвращает
                        результат с Long значением.

ToLongFunction<T> - Представляет функцию, которая возвращает результат с Long значением.

UnaryOperator<T> - Представляет операцию над одним операндом, которая дает результат того
                   же типа, что и ее операнд.

******************************************************************************************************
См. более подробно: https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html
******************************************************************************************************